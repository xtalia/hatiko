// ==UserScript==
// @name         Trade-In Calculator
// @namespace    http://tampermonkey.net/
// @version      1.11
// @description  Calculate trade-in value for devices
// @match        *://*/*
// @grant        GM_registerMenuCommand
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    const superserver = 'memchat.tw1.ru:5000';

    let tradeInData = null;

    function loadTradeInData(force = false) {
        // Show loading message
        const existingWindow = document.getElementById('tradeInWindow');
        if (existingWindow) {
            existingWindow.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>';
        } else {
            const loadingWindow = document.createElement('div');
            loadingWindow.id = 'tradeInWindow';
            loadingWindow.style.position = 'fixed';
            loadingWindow.style.top = '50px';
            loadingWindow.style.left = '50px';
            loadingWindow.style.width = '300px';
            loadingWindow.style.backgroundColor = 'white';
            loadingWindow.style.border = '1px solid black';
            loadingWindow.style.padding = '10px';
            loadingWindow.style.zIndex = '9999';
            loadingWindow.style.fontFamily = 'Arial, sans-serif';
            loadingWindow.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>';
            document.body.appendChild(loadingWindow);
        }

        GM_xmlhttpRequest({
            method: "GET",
            url: `http://${superserver}/load_tn${force ? '?force=true' : ''}`,
            onload: function(response) {
                try {
                    tradeInData = JSON.parse(response.responseText);
                    if (force) {
                        const notice = document.getElementById('updateNotice');
                        if (notice) {
                            notice.textContent = '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.';
                            notice.style.color = 'red';
                        }
                        // Load trade-in data again without force after update
                        GM_xmlhttpRequest({
                            method: "GET",
                            url: `http://${superserver}/load_tn`,
                            onload: function(response) {
                                try {
                                    tradeInData = JSON.parse(response.responseText);
                                    createTradeInWindow();
                                } catch (e) {
                                    console.error('Failed to parse updated trade-in data:', e);
                                }
                            },
                            onerror: function() {
                                console.error('Failed to load updated trade-in data');
                            }
                        });
                    } else {
                        createTradeInWindow();
                    }
                } catch (e) {
                    console.error('Failed to parse trade-in data:', e);
                }
            },
            onerror: function() {
                console.error('Failed to load trade-in data');
            }
        });
    }

    function createTradeInWindow() {
        // Remove existing window if it exists
        const existingWindow = document.getElementById('tradeInWindow');
        if (existingWindow) {
            existingWindow.remove();
        }

        // Create and position the window
        const windowHtml = `
        <div id="tradeInWindow" style="position: fixed; top: 50px; left: 50px; width: 300px; background-color: white; border: 1px solid black; padding: 10px; z-index: 9999; font-family: Arial, sans-serif;">
            <div id="windowHeader" style="display: flex; justify-content: space-between; margin-bottom: 10px; cursor: move;">
                <h2 style="margin: 0;">–û—Ü–µ–Ω–∫–∞ Trade-In</h2>
                <button id="closeTradeInWindow" style="background: none; border: none; font-size: 20px; cursor: pointer;">√ó</button>
            </div>
            <select id="modelSelect" style="width: 100%; margin-bottom: 10px;"></select>
            <select id="memorySelect" style="width: 100%; margin-bottom: 10px;"></select>
            <select id="batteryCapacitySelect" style="width: 100%; margin-bottom: 10px;">
                <option value="90">90%+</option>
                <option value="85">85-90%</option>
                <option value="0">–º–µ–Ω–µ–µ 85%</option>
            </select>
            <select id="deviceConditionSelect" style="width: 100%; margin-bottom: 10px;">
                <option value="device_only">–¢–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</option>
                <option value="device_box">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –∫–æ—Ä–æ–±–∫–∞</option>
                <option value="full">–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç</option>
            </select>
            <div style="margin-bottom: 10px;">
                <input type="checkbox" id="backCoverCheck"> –ó–∞–º–µ–Ω–∞ –∫—Ä—ã—à–∫–∏
            </div>
            <div style="margin-bottom: 10px;">
                <input type="checkbox" id="screenCheck"> –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è
            </div>
            <select id="conditionSelect" style="width: 100%; margin-bottom: 10px;">
                <option value="excellent">–û—Ç–ª–∏—á–Ω–æ</option>
                <option value="good">–•–æ—Ä–æ—à–æ</option>
                <option value="average">–°—Ä–µ–¥–Ω–µ–µ</option>
                <option value="poor">–ü–ª–æ—Ö–æ–µ</option>
            </select>
            <textarea id="resultArea" style="width: 100%; height: 150px; margin-bottom: 10px;" readonly></textarea>
            <div id="updateNotice" style="font-size: 12px; margin-top: 10px;"></div>
        </div>
        `;

        // Create window div and append to body
        const windowDiv = document.createElement('div');
        windowDiv.innerHTML = windowHtml;
        document.body.appendChild(windowDiv);

        const tradeInWindow = document.getElementById('tradeInWindow');
        const closeButton = document.getElementById('closeTradeInWindow');
        const modelSelect = document.getElementById('modelSelect');
        const memorySelect = document.getElementById('memorySelect');
        const deviceConditionSelect = document.getElementById('deviceConditionSelect');

        closeButton.addEventListener('click', () => {
            tradeInWindow.style.display = 'none';
        });

        // Populate model options
        for (const model in tradeInData) {
            const option = document.createElement('option');
            option.value = model;
            option.textContent = model;
            modelSelect.appendChild(option);
        }

        modelSelect.addEventListener('change', updateMemoryOptions);
        updateMemoryOptions();

        const inputs = ['modelSelect', 'memorySelect', 'batteryCapacitySelect', 'deviceConditionSelect', 'backCoverCheck', 'screenCheck', 'conditionSelect'];
        inputs.forEach(id => document.getElementById(id).addEventListener('change', calculateTradeIn));

        function updateMemoryOptions() {
            const selectedModel = modelSelect.value;
            memorySelect.innerHTML = '';
            if (tradeInData[selectedModel]) {
                tradeInData[selectedModel].forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.memory;
                    option.textContent = item.memory + ' GB';
                    memorySelect.appendChild(option);
                });
                calculateTradeIn();
            } else {
                console.error('No data found for the selected model');
            }
        }

        function calculateTradeIn() {
            const model = modelSelect.value;
            const memory = memorySelect.value;
            const batteryCapacity = document.getElementById('batteryCapacitySelect').value;
            const deviceCondition = deviceConditionSelect.value;
            const backCover = document.getElementById('backCoverCheck').checked;
            const screen = document.getElementById('screenCheck').checked;
            const condition = document.getElementById('conditionSelect').value;

            if (!tradeInData[model]) {
                console.error('No data for model:', model);
                return;
            }

            const modelData = tradeInData[model].find(item => item.memory === memory);
            if (!modelData) {
                console.error('No data for memory:', memory);
                return;
            }

            let price = parseInt(modelData.ideal_price, 10);

            if (batteryCapacity === '0') {
                price += parseInt(modelData.battery_replacement, 10);
            } else if (batteryCapacity === '85') {
                price += parseInt(modelData.battery_wear, 10);
            }

            if (deviceCondition === 'device_only') {
                price += parseInt(modelData.device_only, 10);
            } else if (deviceCondition === 'device_box') {
                price += parseInt(modelData.device_box, 10);
            }

            if (backCover) {
                price += parseInt(modelData.back_cover_replacement, 10);
            }

            if (screen) {
                price += parseInt(modelData.screen_replacement, 10);
            }

            if (condition === 'average') {
                price -= price < 20000 ? 2000 : 1000;
            } else if (condition === 'poor') {
                price -= price < 20000 ? 3000 : 2000;
            }

            const backCoverStatus = backCover ? 'üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –∫—Ä—ã—à–∫–∏' : '‚úÖ –ö—Ä—ã—à–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ';
            const screenStatus = screen ? 'üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è' : '‚úÖ –î–∏—Å–ø–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ';

            const conditionEmoji = condition === 'excellent' ? 'üòé' :
                                    condition === 'good' ? 'üòÄ' :
                                    condition === 'average' ? 'üòê' : 'üò¢';

            const result = `
üì≤ ${model} –Ω–∞ ${memory} GB
üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä ${batteryCapacity === '90' ? '90%+' : batteryCapacity === '85' ? '85-90%' : '–º–µ–Ω–µ–µ 85%'}
üì¶ –ö–æ–º–ø–ª–µ–∫—Ç ${deviceCondition === 'device_only' ? '–¢–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' : deviceCondition === 'device_box' ? '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –∫–æ—Ä–æ–±–∫–∞' : '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç'}
${backCoverStatus}
${screenStatus}
${conditionEmoji} –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${condition === 'excellent' ? '–û—Ç–ª–∏—á–Ω–æ–µ' : condition === 'good' ? '–•–æ—Ä–æ—à–µ–µ' : condition === 'average' ? '–°—Ä–µ–¥–Ω–µ–µ' : '–ü–ª–æ—Ö–æ–µ'}

üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞: ${price} —Ä—É–±–ª–µ–π

üëâ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
            `;

            document.getElementById('resultArea').value = result;
        }

        // Make the window draggable only by the header
        let isDragging = false;
        let dragOffsetX, dragOffsetY;

        const windowHeader = document.getElementById('windowHeader');
        windowHeader.addEventListener('mousedown', (e) => {
            isDragging = true;
            dragOffsetX = e.clientX - tradeInWindow.offsetLeft;
            dragOffsetY = e.clientY - tradeInWindow.offsetTop;
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                tradeInWindow.style.left = (e.clientX - dragOffsetX) + 'px';
                tradeInWindow.style.top = (e.clientY - dragOffsetY) + 'px';
            }
        });

        document.addEventListener('mouseup', () => {
            if (isDragging) {
                isDragging = false;
            }
        });
    }

    GM_registerMenuCommand("–û—Ü–µ–Ω–∫–∞ Trade-In", () => {
        loadTradeInData(); // Load trade-in data and then create window
    });

    GM_registerMenuCommand("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–π–¥–∏–Ω", () => {
        GM_xmlhttpRequest({
            method: "GET",
            url: `http://${superserver}/load_tn?force=true`,
            onload: function() {
                const notice = document.getElementById('updateNotice');
                if (notice) {
                    notice.textContent = '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.';
                    notice.style.color = 'red';
                }
                // Load trade-in data again without force after update
                GM_xmlhttpRequest({
                    method: "GET",
                    url: `http://${superserver}/load_tn`,
                    onload: function(response) {
                        try {
                            tradeInData = JSON.parse(response.responseText);
                            createTradeInWindow();
                            if (notice) {
                                notice.textContent = '';
                            }
                        } catch (e) {
                            console.error('Failed to parse updated trade-in data:', e);
                        }
                    },
                    onerror: function() {
                        console.error('Failed to load updated trade-in data');
                    }
                });
            },
            onerror: function() {
                console.error('Failed to force update trade-in data');
            }
        });
    });

})();
