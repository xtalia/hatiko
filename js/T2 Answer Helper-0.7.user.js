// ==UserScript==
// @name         T2 Answer Helper
// @namespace    http://tampermonkey.net/
// @version      0.7.91
// @description  Extract answers from a T2 test and highlight correct ones
// @author       Your Name
// @match        https://*.t2.ru/*
// @grant        GM_addStyle
// @grant        GM_registerMenuCommand
// ==/UserScript==

(function() {
    'use strict';

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    let isDragging = false;
    let dragOffsetX = 0;
    let dragOffsetY = 0;

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let currentQuestionIndex = 1;
    let totalQuestions = 15;
    let answersCache = [];

    // –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    GM_addStyle(`
        .t2-answer-highlight {
            background-color: #add8e6 !important;
            padding: 2px;
            border-radius: 3px;
        }
        #answerHelper {
            cursor: default;
            user-select: none;
        }
        #answerHelper h3 {
            cursor: move;
        }
        .emoji {
            font-size: 1.2em;
            vertical-align: middle;
        }
    `);

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    const floatDiv = document.createElement('div');
    floatDiv.id = 'answerHelper';
    floatDiv.style.position = 'fixed';
    floatDiv.style.bottom = '10px';
    floatDiv.style.right = '10px';
    floatDiv.style.width = '350px';
    floatDiv.style.backgroundColor = 'white';
    floatDiv.style.border = '1px solid #ccc';
    floatDiv.style.padding = '10px';
    floatDiv.style.zIndex = '10000';
    floatDiv.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.1)';
    document.body.appendChild(floatDiv);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
    const title = document.createElement('h3');
    title.innerHTML = '<span class="emoji">üîç</span> –ü–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ T2';
    title.style.margin = '0 0 10px 0';
    title.style.paddingBottom = '5px';
    title.style.borderBottom = '1px solid #eee';
    floatDiv.appendChild(title);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    title.addEventListener('mousedown', function(e) {
        isDragging = true;
        dragOffsetX = e.clientX - floatDiv.getBoundingClientRect().left;
        dragOffsetY = e.clientY - floatDiv.getBoundingClientRect().top;
        floatDiv.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', function(e) {
        if (isDragging) {
            floatDiv.style.left = (e.clientX - dragOffsetX) + 'px';
            floatDiv.style.top = (e.clientY - dragOffsetY) + 'px';
            floatDiv.style.bottom = 'auto';
            floatDiv.style.right = 'auto';
        }
    });

    document.addEventListener('mouseup', function() {
        isDragging = false;
        floatDiv.style.cursor = 'default';
    });

    // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    const inputLink = document.createElement('input');
    inputLink.type = 'text';
    inputLink.placeholder = 'üìã –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç';
    inputLink.style.width = '100%';
    inputLink.style.marginBottom = '10px';
    inputLink.style.padding = '5px';
    floatDiv.appendChild(inputLink);

    // –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–º
    const questionControl = document.createElement('div');
    questionControl.style.display = 'flex';
    questionControl.style.alignItems = 'center';
    questionControl.style.marginBottom = '10px';
    floatDiv.appendChild(questionControl);

    // –ü–æ–ª–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    const questionNumberInput = document.createElement('input');
    questionNumberInput.type = 'number';
    questionNumberInput.min = '1';
    questionNumberInput.max = totalQuestions.toString();
    questionNumberInput.value = currentQuestionIndex.toString();
    questionNumberInput.style.width = '50px';
    questionNumberInput.style.marginRight = '10px';
    questionNumberInput.style.padding = '5px';
    questionNumberInput.onchange = function() {
        updateQuestion(Number(this.value));
    };
    questionControl.appendChild(questionNumberInput);

    // –°–ª–∞–π–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    const questionSlider = document.createElement('input');
    questionSlider.type = 'range';
    questionSlider.min = '1';
    questionSlider.max = totalQuestions.toString();
    questionSlider.value = currentQuestionIndex.toString();
    questionSlider.style.flex = '1';
    questionSlider.oninput = function() {
        updateQuestion(Number(this.value));
    };
    questionControl.appendChild(questionSlider);

    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç—ã"
    const getAnswersButton = document.createElement('button');
    getAnswersButton.innerHTML = '<span class="emoji">üì•</span> –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç—ã';
    getAnswersButton.style.width = '100%';
    getAnswersButton.style.marginBottom = '10px';
    getAnswersButton.style.padding = '5px';
    getAnswersButton.onclick = async () => {
        await loadAndHighlightAnswers();
    };
    floatDiv.appendChild(getAnswersButton);

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤
    const resultField = document.createElement('textarea');
    resultField.id = 'resultField';
    resultField.style.width = '100%';
    resultField.style.height = '150px';
    resultField.style.marginBottom = '10px';
    resultField.style.padding = '5px';
    resultField.readOnly = true;
    floatDiv.appendChild(resultField);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
    const infoField = document.createElement('div');
    infoField.id = 'infoField';
    infoField.style.fontSize = '12px';
    infoField.style.color = '#666';
    floatDiv.appendChild(infoField);

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    async function loadAndHighlightAnswers() {
        const link = inputLink.value;
        if (!link) {
            showInfo('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç');
            return;
        }

        try {
            showInfo('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤...');
            await fetchAndCacheAnswers(link);
            highlightAnswers();
            updateResultField();
            showInfo(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${answersCache.length} –≤–æ–ø—Ä–æ—Å–æ–≤. –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: ${currentQuestionIndex}`);
        } catch (error) {
            showInfo(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: ${error.message}`);
            console.error(error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    function updateQuestion(index) {
        if (index < 1) index = 1;
        if (index > totalQuestions) index = totalQuestions;
        
        currentQuestionIndex = index;
        questionNumberInput.value = index.toString();
        questionSlider.value = index.toString();
        
        if (answersCache.length > 0) {
            highlightAnswers();
            updateResultField();
            showInfo(`üìå –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: ${currentQuestionIndex}`);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    async function fetchAndCacheAnswers(link) {
        const url = new URL(link);
        const atl = url.searchParams.get('object_id');
        const code = url.searchParams.get('part_code');
        
        if (!atl || !code) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞');
        }

        const apiUrl = `https://abc.t2.ru/qti_return.html?atl=${atl}&code=${code}&charset=utf-8`;
        const response = await fetch(apiUrl);
        const xml = await response.text();

        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xml, 'text/xml');
        const items = xmlDoc.getElementsByTagName('item');
        
        answersCache = [];
        totalQuestions = items.length;
        questionSlider.max = totalQuestions.toString();
        questionNumberInput.max = totalQuestions.toString();

        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const title = item.getAttribute('title');
            const responseLid = item.getElementsByTagName('response_lid')[0];
            const labels = responseLid.getElementsByTagName('response_label');
            const correctLabels = Array.from(labels).filter(label => label.getAttribute('ws_right') === '1');
            const correctTexts = correctLabels.map(label => label.getElementsByTagName('mattext')[0].textContent.trim());
            answersCache.push({ title, correctTexts });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    function highlightAnswers() {
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        document.querySelectorAll('.t2-answer-highlight').forEach(el => {
            el.classList.remove('t2-answer-highlight');
        });

        if (!answersCache[currentQuestionIndex - 1]) return;
        
        const correctAnswers = answersCache[currentQuestionIndex - 1].correctTexts;
        if (correctAnswers.length === 0) return;

        // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            null,
            false
        );

        const textNodes = [];
        let node;
        while (node = walker.nextNode()) {
            if (node.nodeValue.trim() !== '') {
                textNodes.push(node);
            }
        }

        correctAnswers.forEach(answer => {
            textNodes.forEach(textNode => {
                if (textNode.nodeValue.includes(answer)) {
                    const parent = textNode.parentNode;
                    if (parent.nodeName !== 'SCRIPT' && parent.nodeName !== 'STYLE') {
                        const span = document.createElement('span');
                        span.className = 't2-answer-highlight';
                        parent.replaceChild(span, textNode);
                        span.appendChild(textNode);
                    }
                }
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    function updateResultField() {
        if (!answersCache[currentQuestionIndex - 1]) {
            resultField.value = '‚ùå –û—Ç–≤–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
            return;
        }

        const question = answersCache[currentQuestionIndex - 1];
        resultField.value = `‚ùì –í–æ–ø—Ä–æ—Å ${currentQuestionIndex}:\n${question.title}\n\n` +
                          `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n${question.correctTexts.map(t => `‚úî ${t}`).join('\n')}`;
    }

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    function copyAllAnswersToClipboard() {
        if (answersCache.length === 0) {
            showInfo('‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        const allAnswers = answersCache.map((q, i) => {
            return `‚ùì –í–æ–ø—Ä–æ—Å ${i + 1}:\n${q.title}\n\n` +
                   `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n${q.correctTexts.map(t => `‚úî ${t}`).join('\n')}\n\n`;
        }).join('');

        GM_setClipboard(allAnswers, 'text');
        showInfo('üìã –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    function showInfo(message) {
        infoField.innerHTML = message;
    }

    // –ú–µ–Ω—é Tampermonkey
    GM_registerMenuCommand('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã', copyAllAnswersToClipboard);
    GM_registerMenuCommand('üîç –û—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤', () => {
        floatDiv.style.display = 'block';
    });
})();