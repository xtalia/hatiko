// ==UserScript==
// @name         Price Calculator
// @namespace    https://github.com/xtalia/vscode/blob/main/memchat/js/price_calculator.js
// @version      1.7.8
// @description  –î–æ–±–∞–≤–ª—è–µ—Ç –æ–∫–æ—à–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –∞ —Ç–∞–∫–∂–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏
// @author       Serg
// @match        https://online.moysklad.ru/*
// @match        https://*.bitrix24.ru/*
// @grant        GM_registerMenuCommand
// ==/UserScript==

(function() {
    'use strict';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –≤ iframe
    if (window.self !== window.top) {
        return; // –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω –≤ iframe
    }

        /*

    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    */


    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    const UPDATE_INTERVAL = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤
    let rateConfigurations = {};
    let previousRateConfigurations = {};
    const jsonUrl = "https://raw.githubusercontent.com/xtalia/hatiko/refs/heads/main/js/calculatorRates.json";



    let calculatorVisible = true;
    let container;




    /*

    –§–£–ù–ö–¶–ò–ò

    */

        // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
async function loadRateConfigurations() {
    try {
        const response = await fetch(jsonUrl);
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: ${response.status}`);
        }
        rateConfigurations = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ rateConfigurations –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", rateConfigurations);

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        saveToLocalStorage(rateConfigurations);
    } catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è rateConfigurations:", error);

        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const savedData = loadFromLocalStorage();
        if (savedData) {
            rateConfigurations = savedData;
            console.log("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", rateConfigurations);
        } else {
            console.error("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.");
        }
    }
}


    async function forceUpdateRateConfigurations() {
    await loadRateConfigurations();
    alert("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.");
}

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
function saveToLocalStorage(data) {
    localStorage.setItem("rateConfigurations", JSON.stringify(data));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function loadFromLocalStorage() {
    const savedData = localStorage.getItem("rateConfigurations");
    return savedData ? JSON.parse(savedData) : null;
}
    function createCalculator() {
        container = document.createElement('div');
        container.style.cssText = 'position: fixed; bottom: 10px; right: 10px; width: 250px; background: linear-gradient(to bottom right, #f0f0f0, #e0e0e0); border: 1px solid #ccc; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 15px; z-index: 1000;';

        const header = document.createElement('div');
        header.style.cssText = 'display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px; cursor: pointer;';

        const title = document.createElement('span');
        title.textContent = `üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ${GM_info.script.version}`;
        title.style.fontWeight = 'bold';
        title.style.fontSize = '14px';
        header.appendChild(title);

        const toggleButton = document.createElement('span');
        toggleButton.textContent = '‚ñ≤';
        toggleButton.style.cssText = 'font-size: 14px;';
        header.appendChild(toggleButton);

        header.addEventListener('click', () => {
            content.style.display = content.style.display === 'none' ? 'block' : 'none';
            toggleButton.textContent = content.style.display === 'none' ? '‚ñº' : '‚ñ≤';
        });

        container.appendChild(header);

        const content = document.createElement('div');
        content.style.display = 'block';

        const cashInput = createInputElement('number', '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É');
        cashInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                calculate(); // –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
            }
        });
content.appendChild(cashInput);

        const modeSelect = createSelectElement([
            { value: 'all', text: '–î–ª—è –≤—Å–µ—Ö' },
            { value: 'balakovo', text: '–î–ª—è –ë–∞–ª–∞–∫–æ–≤–æ' },
            { value: 'prepay', text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 5%' }
        ]);
        content.appendChild(modeSelect);

        const calculateButton = createButtonElement('–ü–æ—Å—á–∏—Ç–∞—Ç—å', () => calculate());
        content.appendChild(calculateButton);

        const reverseButton = createButtonElement('–†–µ–≤–µ—Ä—Å', () => reverseCalculate());
        reverseButton.style.backgroundColor = '#f44336'; // –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        reverseButton.style.marginBottom = '5px'; // –ü—Ä–∏–º–µ—Ä —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        content.appendChild(reverseButton);

        const resultField = createTextAreaElement('', 80);
        content.appendChild(resultField);

        const discountInput = createInputElement('number', '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏');
        content.appendChild(discountInput);

        const applyDiscountButton = createButtonElement('–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É', () => applyDiscount());
        content.appendChild(applyDiscountButton);

function reverseCalculate() {
    const reverseAmount = parseFloat(cashInput.value);
    const mode = modeSelect.value;
    const rates = rateConfigurations[mode];

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –ë–∞–ª–∞–∫–æ–≤–æ
    const originalQrPrice = Math.round(reverseAmount / rates.qr);
    const originalCardPrice = Math.round(reverseAmount / rates.card);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≤–µ—Ä—Å –¥–ª—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –Ω–∞ 6, 10, 12, 18 –∏ 24 –º–µ—Å—è—Ü–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    const originalRassrochkaSix = Math.round(reverseAmount / rates.six);
    const originalRassrochkaTen = Math.round(reverseAmount / rates.ten);
    const originalRassrochkaTwelve = Math.round(reverseAmount / rates.twelve || reverseAmount);
    const originalRassrochkaEighteen = Math.round(reverseAmount / rates.eighteen || reverseAmount);
    const originalRassrochkaTwentyFour = Math.round(reverseAmount / rates.twentyfour || reverseAmount);
    const originalRassrochkaThirtySix = Math.round(reverseAmount / rates.thirtysix || reverseAmount);
    // const originalCreditPrice = Math.round(reverseAmount / rates.credit);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–†–ï–í–ï–†–°"
    resultField.value = `
üîÑ –†–ï–í–ï–†–° —Ä–∞—Å—á–µ—Ç–∞:
üîπ QR: ${originalQrPrice} —Ä—É–±.
üîπ –ö–∞—Ä—Ç–∞: ${originalCardPrice} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 6 –º–µ—Å: ${originalRassrochkaSix} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 10 –º–µ—Å: ${originalRassrochkaTen} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 12 –º–µ—Å: ${originalRassrochkaTwelve} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 18 –º–µ—Å: ${originalRassrochkaEighteen} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 24 –º–µ—Å: ${originalRassrochkaTwentyFour} —Ä—É–±.
üîπ –†–∞—Å—Å—Ä–æ—á–∫–∞ 36 –º–µ—Å: ${originalRassrochkaThirtySix} —Ä—É–±.

`.trim();
    //üîπ –ö—Ä–µ–¥–∏—Ç: ${originalCreditPrice} —Ä—É–±.
}


function calculate() {

    const cash = parseFloat(cashInput.value);
    const mode = modeSelect.value;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if (isNaN(cash) || cash <= 0) {
        resultField.value = '–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.';
        return;
    }
    if (mode === 'prepay') {
        const prepayPercentage = 0.05;
        const prepayAmount = Math.ceil(cash * prepayPercentage / 500) * 500; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 500
        resultField.value = `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 5%: ${prepayAmount} —Ä—É–±–ª–µ–π\n`;
        return;
    }

    const rates = rateConfigurations[mode];
    const credit_month = 36;

    const qr_price = Math.round(cash * rates.qr / 100) * 100 - 10;
    const card_price = Math.round(cash * rates.card / 100) * 100 - 10;
    const rassrochka_price_six = Math.round(cash * rates.six / 100) * 100 - 10;
    const rassrochka_price_ten = Math.round(cash * rates.ten / 100) * 100 - 10;
    const rassrochka_price_twelve = Math.round(cash * rates.twelve / 100) * 100 - 10;
    const rassrochka_price_eighteen = Math.round(cash * rates.eighteen / 100) * 100 - 10;
    const rassrochka_price_twentyfour = Math.round(cash * rates.twentyfour / 100) * 100 - 10;
    const rassrochka_price_thirtysix = Math.round(cash * rates.thirtysix / 100) * 100 - 10;
    // const credit_price = Math.round(cash * rates.credit / 100) * 100 - 10;
    const cashback_amount = Math.round(cash * 0.01);

    // const twenty = Math.round(credit_price * ((20 / 12 / 100) * (1 + (20 / 12 / 100)) ** credit_month) / (((1 + (20 / 12 / 100)) ** credit_month) - 1));
    // const forty = Math.round(credit_price * ((40 / 12 / 100) * (1 + (40 / 12 / 100)) ** credit_month) / (((1 + (40 / 12 / 100)) ** credit_month) - 1));

    resultField.value = `
üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: ${cash} —Ä—É–±.
üì∑ QR: ${qr_price} —Ä—É–±.
üí≥ –ö–∞—Ä—Ç–æ–π: ${card_price} —Ä—É–±.

üè¶ –†–∞—Å—Å—Ä–æ—á–∫–∞
üîπ 6 –º–µ—Å.: ${rassrochka_price_six} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_six / 6)} —Ä—É–±./–º–µ—Å)
üîπ 10 –º–µ—Å.: ${rassrochka_price_ten} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_ten / 10)} —Ä—É–±./–º–µ—Å)
üîπ 12 –º–µ—Å.: ${rassrochka_price_twelve} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_twelve / 12)} —Ä—É–±./–º–µ—Å)
üîπ 18 –º–µ—Å.: ${rassrochka_price_eighteen} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_eighteen / 18)} —Ä—É–±./–º–µ—Å)
üîπ 24 –º–µ—Å.: ${rassrochka_price_twentyfour} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_twentyfour / 24)} —Ä—É–±./–º–µ—Å)
üîπ 36 –º–µ—Å.: ${rassrochka_price_thirtysix} —Ä—É–±. (–æ—Ç ${Math.round(rassrochka_price_thirtysix / 36)} —Ä—É–±./–º–µ—Å)

üí∏ –ö—ç—à–±—ç–∫: ${cashback_amount} –±–∞–ª–ª–∞–º–∏
`.trim();
    //üèõ –ö—Ä–µ–¥–∏—Ç: ${credit_price} —Ä—É–±. + % –±–∞–Ω–∫–∞ (–æ—Ç 20% –¥–æ 40% –≥–æ–¥–æ–≤—ã—Ö, —É—Å–ª–æ–≤–∏—è —É—Ç–æ—á–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä)
}


        function applyDiscount() {
            const originalPrice = parseFloat(cashInput.value);
            const discount = parseFloat(discountInput.value);
            
            if (!isNaN(discount)) {
                const discountedPrice = originalPrice - discount;
                const discountPercentage = (discount / originalPrice) * 100;

                resultField.value = `
üéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞:
üîπ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${originalPrice} —Ä—É–±–ª–µ–π
üîπ –°–∫–∏–¥–∫–∞: ${discount} —Ä—É–±–ª–µ–π
üîπ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: ${discountPercentage} %
üîπ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${discountedPrice} —Ä—É–±–ª–µ–π
`.trim();
            } else {
                resultField.value = '–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).';
            }
        }

        function createInputElement(type, placeholder) {
            const input = document.createElement('input');
            input.type = type;
            input.placeholder = placeholder;
            input.style.cssText = 'width: 100%; padding: 8px; margin-bottom: 5px; border-radius: 5px; border: 1px solid #ccc; box-sizing: border-box;';
            return input;
        }

        function createSelectElement(options) {
            const select = document.createElement('select');
            select.style.cssText = 'width: 100%; padding: 8px; margin-bottom: 5px; border-radius: 5px; border: 1px solid #ccc; box-sizing: border-box;';
            options.forEach(option => {
                const opt = document.createElement('option');
                opt.value = option.value;
                opt.textContent = option.text;
                select.appendChild(opt);
            });
            return select;
        }

        function createButtonElement(text, clickHandler) {
            const button = document.createElement('button');
            button.textContent = text;
            button.style.cssText = 'width: 100%; padding: 8px; margin-bottom: 5px; border-radius: 5px; border: none; background-color: #4CAF50; color: white; font-size: 14px; cursor: pointer; transition: background-color 0.3s;';
            button.addEventListener('click', clickHandler);
            button.addEventListener('mouseover', () => {
                button.style.backgroundColor = '#45a049';
            });
            button.addEventListener('mouseout', () => {
                button.style.backgroundColor = '#4CAF50';
            });
            return button;
        }

        function createTextAreaElement(value, height) {
            const textarea = document.createElement('textarea');
            textarea.value = value;
            textarea.style.cssText = 'width: 100%; height: ' + height + 'px; padding: 8px; margin-bottom: 5px; border-radius: 5px; border: 1px solid #ccc; box-sizing: border-box;';
            textarea.readOnly = true;
            return textarea;
        }

        container.appendChild(content);
        document.body.appendChild(container);
    }

    function toggleCalculator() {
        if (calculatorVisible) {
            container.style.display = 'none';
        } else {
            container.style.display = 'block';
        }
        calculatorVisible = !calculatorVisible;
    }

    function addMenuCommand() {
        GM_registerMenuCommand("Toggle Price Calculator", toggleCalculator);
        GM_registerMenuCommand("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", forceUpdateRateConfigurations);
    }

window.addEventListener('load', () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const savedData = loadFromLocalStorage();
    if (savedData) {
        rateConfigurations = savedData;
        console.log("–î–∞–Ω–Ω—ã–µ rateConfigurations –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", rateConfigurations);
    } else {
        // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        loadRateConfigurations();
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
    createCalculator();
    addMenuCommand();

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
    setInterval(loadRateConfigurations, UPDATE_INTERVAL);
});
})();
